{
	Children: [
	{
		Blank: {
		ID: "start",
		OnExecuteStarted: "//initialization
globals['operand']=null;
globals['operator']=null;
globals['result']=null;",
		OutgoingIDs: ["console.selector"]
		}
	},
	{
		Decision: {
		ID: "console.selector",
		Condition: "if (this.IsConsole)
{
	Console.WriteLine('enter number or operator.');
	var text = Console.ReadLine();
	if (isNumeric(text))
	{
		this.setInput({ 'console.selector': [value(text)] });
		return ['number'];
	}
	else
	{
		switch (text)
		{
		case '':
		case '/':
		case '*':
		case '-':
		case '+':
		{
			this.setInput({ 'console.selector': [text] });
			return ['operator'];
		}
			break;
		case 'c':
		case 'C':
			return ['reset'];
			break;
		}
	}
	return ['console.selector'];
}",
		OutgoingIDs: ["console.selector","end","number","operator","reset"],
		TriggerMode: 1
		}
	},
	{
		Decision: {
		Condition: "var values = this.getInput()['console.selector'];
if (values != null && values.Length)
{
	if (globals['result'] == null)
	{
		globals['result']=values[0].Data;
	}
	else
	{
		globals['operand']=values[0].Data;
	}

	this.msg(toString(globals['result']) + ' ' + globals['operator']);
	
	return ['calculator'];
}
return ['console.selector'];",
		ID: "number",
		OutgoingIDs: ["calculator","console.selector"]
		}
	},
	{
		Decision: {
		Condition: "var values = globals['result'] == null ? this.getOutput() : this.getInput()['console.selector'];
if (values != null && values.Length)
{
	globals['operator']=values[0].Data;
	
	this.msg(toString(globals['result']) + ' ' + globals['operator']);
	
	return ['calculator'];
}
return ['console.selector'];",
		ID: "operator",
		OutgoingIDs: ["calculator","console.selector"]
		}
	},
	{
		Blank: {
		ID: "calculator",
		OnExecuteStarted: "if (globals['operand'] == null || globals['operator'] == null || globals['result'] == null)
{
	return;
}

switch (globals['operator'])
{
	case '/':
	{
		globals['result']=globals['result']/globals['operand'];
	}
		break;
	case '*':
	{
		globals['result']=globals['result']*globals['operand'];
	}
		break;
	case '-':
	{
		globals['result']=globals['result']-globals['operand'];
	}
		break;
	case '+':
	{
		globals['result']=globals['result']+globals['operand'];
	}
		break;
}

globals['operand'] = null;

this.msg('= ' + toString(globals['result']));
",
		OutgoingIDs: ["console.selector"]
		}
	},
	{
		Blank: {
		ID: "reset",
		OnExecuteStarted: "//reset
globals['operand']=null;
globals['operator']=null;
globals['result']=null;",
		OutgoingIDs: ["console.selector"]
		}
	},
	{
		Blank: {
		ID: "end"
		}
	}
	]
}