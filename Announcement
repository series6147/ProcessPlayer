  In the autumn 2019 I am going to begin create new language especially for undefined state machine.
Main difference between state machine and undefined state machine it is flexible connections between their
states which are not anymore static. Every body who wants to join welcome!

Prototype (IE syntaxis):

base type:

1. State
2. Object

datatypes:

1. object
2. list
3. tuple/set
4. dictionary

transitions:

1. a => a
2. a + b + c => d
3. a + b + c => d, a + b + e => d
4. a if ... else b + c => d
5. (a if ... else b) + c => d
6. a => b => c => d
7. a => b => (c, d, e => f)
8. a if ... else None => b
9. a + b + c => d, a + e.alias("b") + f.alias("c") => d
10. a + b + c => d -> (a, b)
11. a => b -> (None)
11. a => b -> (self)
13. c -> (a, b)
14. c -> (a, b) if ... else (b, self)
15. c -> (a, b) if ... else (b, d, e)
15. c -> (a, b) if ... else (None)

getting input data:

1. a.in.b
2. a.in.b[...]
3. a.in.b(...)
4. a.in.b{...}

getting output data:

1. a.out = object
2. a.out = list
3. a.out = tuple/set
4. a.out = dictionary
